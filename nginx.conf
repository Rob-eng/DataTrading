# Define o servidor upstream para a nossa aplicação FastAPI
upstream fastapi_backend_service {
    # 'backend' é o nome do serviço do FastAPI definido no docker-compose.yml
    # '8000' é a porta interna que o Uvicorn está escutando dentro do contêiner do backend
    server backend:8000;
}

server {
    listen 80; # O Nginx escutará na porta 80 (HTTP) para requisições externas

    # Defina o nome do servidor.
    # Para desenvolvimento local, 'localhost' é suficiente.
    # Para produção, substitua pelo seu domínio/subdomínio (ex: analise.demap.com.br)
    # ou use '_' para aceitar qualquer nome de host (se este for o único site no IP).
    server_name localhost analise.demap.com.br 191.252.102.219; # Adicione seu IP público também

    # Define um tamanho máximo maior para o corpo da requisição (para uploads de arquivos)
    # Ajuste este valor conforme o MAX_FILE_SIZE_MB do seu app + uma margem.
    # 25M = 25 Megabytes. Se MAX_FILE_SIZE_MB for 20, 25M é uma boa margem.
    client_max_body_size 25M;

    # Localização padrão para todas as requisições que começam com /api
    # (ou qualquer prefixo que você definir para suas rotas FastAPI)
    location /api {
        # Remove o prefixo /api antes de passar para o backend, se suas rotas FastAPI não o incluírem
        # Se suas rotas FastAPI já incluem /api (ex: @router.get("/v1/health")),
        # então você não precisa do rewrite e o proxy_pass seria para http://fastapi_backend_service/api
        # Se suas rotas FastAPI NÃO incluem /api (ex: @router.get("/v1/health")),
        # então o rewrite abaixo é útil. Vamos assumir que suas rotas FastAPI *não* têm /api no início.
        # rewrite /api/(.*) /$1 break; # Comente ou ajuste conforme suas rotas FastAPI

        proxy_pass http://fastapi_backend_service; # Passa a requisição para o upstream

        # Define cabeçalhos importantes para o proxy reverso
        # Eles garantem que sua aplicação Flask/FastAPI receba informações corretas sobre o cliente original
        proxy_set_header Host $host;                     # Passa o cabeçalho Host original
        proxy_set_header X-Real-IP $remote_addr;           # Passa o IP real do cliente
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Lista de IPs pelos quais a requisição passou
        proxy_set_header X-Forwarded-Proto $scheme;        # Informa se a conexão original era http ou https

        # Ajusta timeouts se sua aplicação demora para responder (ex: geração de PDF)
        # Valores em segundos. 600s = 10 minutos.
        proxy_connect_timeout       600s;
        proxy_send_timeout          600s;
        proxy_read_timeout          600s;
        send_timeout                600s;

        # Opcional: Buffering. Pode ajudar com respostas longas, mas pode usar mais disco/memória.
        # proxy_buffering on;
        # proxy_buffers 8 128k;
        # proxy_buffer_size 256k;
        # proxy_busy_buffers_size 256k;
    }

    # Encaminha requisições para a documentação Swagger UI
    location /docs {
        proxy_pass http://fastapi_backend_service/docs; # Passa para /docs do backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Encaminha requisições para a documentação ReDoc (opcional, mas bom ter)
    location /redoc {
        proxy_pass http://fastapi_backend_service/redoc; # Passa para /redoc do backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    # (No futuro, se você tiver um frontend SPA - Single Page Application)
    # location / {
    #     # Caminho para os arquivos estáticos do seu frontend buildado DENTRO do contêiner Nginx
    #     # (você montaria esse volume no docker-compose.yml)
    #     root /usr/share/nginx/html;
    #     index index.html index.htm;
    #     try_files $uri $uri/ /index.html; # Importante para roteamento do lado do cliente em SPAs
    # }

    # Bloco para tratar erros (opcional, mas bom para customizar páginas de erro)
    # error_page 500 502 503 504 /50x.html;
    # location = /50x.html {
    #     root /usr/share/nginx/html; # Crie um arquivo 50x.html aqui
    # }
}